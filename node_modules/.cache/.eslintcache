[{"/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/index.js":"1","/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/Canvas.js":"2","/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/Components/NavBar.js":"3","/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/Components/Cart.js":"4"},{"size":292,"mtime":1638588596393,"results":"5","hashOfConfig":"6"},{"size":4477,"mtime":1638588596391,"results":"7","hashOfConfig":"6"},{"size":2050,"mtime":1638588596392,"results":"8","hashOfConfig":"6"},{"size":2644,"mtime":1638588596392,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r5ngr5",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/index.js",[],"/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/Canvas.js",["21"],"import React from \"react\";\nimport _ from \"lodash\";\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\n//import { MDBBtn, MDBRipple } from \"mdb-react-ui-kit\";\nimport \"./css/react-grid-layout-style.css\";\nimport \"./css/react-resizable-style.css\";\nimport { PlusCircle } from \"react-bootstrap-icons\";\nimport NavBar from \"./Components/NavBar\";\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\nfunction generateLayout() {\n  return _.map(_.range(0, 41), function (item, i) {\n    const width = 12; // width of entire canvas (should ideally be multiple of 4 and 3)\n    const y = 4;\n    const w = 3;\n    var h = Math.ceil(Math.random() * 6) + 1; // variability in height\n    var x = (_.random(0, y - 1) * w) % width;\n    return {\n      x: x,\n      y: Math.floor(i / y) * h,\n      w: w,\n      h: h,\n      i: i.toString(),\n    };\n  });\n}\n\nexport default class Canvas extends React.Component {\n  static defaultProps = {\n    className: \"layout\",\n    rowHeight: 30,\n    onLayoutChange: function () {},\n    cols: { lg: 12, md: 9, sm: 6, xs: 4, xxs: 2 },\n    initialLayout: generateLayout(),\n  };\n\n  state = {\n    currentBreakpoint: \"lg\",\n    compactType: \"vertical\",\n    mounted: false,\n    layouts: { lg: this.props.initialLayout },\n    block: { lg: [] },\n  };\n\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  generateDOM() {\n    return _.map(this.state.layouts[this.state.currentBreakpoint], (l) => {\n      return (\n        <div key={l.i}>\n          <PlusCircle\n            className=\"hide-button\"\n            onClick={this.onPutItem.bind(this, l)}\n          />\n          <img\n            src={`https://picsum.photos/${l.w * 230}/${l.h * 100}`}\n            style={{ maxWidth: \"100%\", maxHeight: \"100%\" }}\n          ></img>\n          {/*<span className=\"text\">{l.i}</span>  //commented out for demo purposes:) */}\n        </div>\n      );\n    });\n  }\n\n  onBreakpointChange = (breakpoint) => {\n    this.setState((prevState) => ({\n      currentBreakpoint: breakpoint,\n      block: {\n        ...prevState.block,\n        [breakpoint]:\n          prevState.block[breakpoint] ||\n          prevState.block[prevState.currentBreakpoint] ||\n          [],\n      },\n    }));\n  };\n\n  onClearItems = () => {\n    (this.state.block[this.state.currentBreakpoint] || []).forEach((item) => {\n      this.onTakeItem(item);\n    });\n    console.log(\"clear\");\n  };\n\n  onTakeItem = (item) => {\n    this.setState((prevState) => ({\n      block: {\n        ...prevState.block,\n        [prevState.currentBreakpoint]: prevState.block[\n          prevState.currentBreakpoint\n        ].filter(({ i }) => i !== item.i),\n      },\n      layouts: {\n        ...prevState.layouts,\n        [prevState.currentBreakpoint]: [\n          ...prevState.layouts[prevState.currentBreakpoint],\n          item,\n        ],\n      },\n    }));\n  };\n\n  onPutItem = (item) => {\n    this.setState((prevState) => {\n      return {\n        block: {\n          ...prevState.block,\n          [prevState.currentBreakpoint]: [\n            ...(prevState.block[prevState.currentBreakpoint] || []),\n            item,\n          ],\n        },\n        layouts: {\n          ...prevState.layouts,\n          [prevState.currentBreakpoint]: prevState.layouts[\n            prevState.currentBreakpoint\n          ].filter(({ i }) => i !== item.i),\n        },\n      };\n    });\n  };\n\n  onLayoutChange = (layout, layouts) => {\n    this.props.onLayoutChange(layout, layouts);\n    this.setState({ layouts });\n  };\n\n  onNewLayout = () => {\n    this.setState({\n      layouts: {\n        lg: generateLayout(),\n        md: generateLayout(),\n        sm: generateLayout(),\n        xs: generateLayout(),\n        xxs: generateLayout(),\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          onNewLayout={this.onNewLayout}\n          onTakeItem={this.onTakeItem}\n          onClearItems={this.onClearItems}\n          items={this.state.block[this.state.currentBreakpoint] || []}\n        />\n\n        <ResponsiveReactGridLayout\n          {...this.props}\n          layouts={this.state.layouts}\n          onBreakpointChange={this.onBreakpointChange}\n          onLayoutChange={this.onLayoutChange}\n          // WidthProvider option\n          measureBeforeMount={false}\n          useCSSTransforms={this.state.mounted}\n          compactType={this.state.compactType}\n          preventCollision={!this.state.compactType}\n        >\n          {this.generateDOM()}\n        </ResponsiveReactGridLayout>\n      </div>\n    );\n  }\n}\n",["22","23"],"/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/Components/NavBar.js",["24","25"],"// Nav Bar Component\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Form,\n  Navbar,\n  Container,\n  Nav,\n  FormControl,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { MDBBtn, MDBIcon, MDBRipple } from \"mdb-react-ui-kit\";\nimport { ArrowRepeat, Search } from \"react-bootstrap-icons\";\nimport Cart from \"./Cart\";\n\nexport default class NavBar extends React.Component {\n  render() {\n    return (\n      <Navbar expand=\"lg\" sticky=\"top\">\n        <Container fluid>\n          <Navbar.Brand href=\"#\">\n            <img src=\"logo.png\" alt=\"logo\" style={{ height: 40 }} />\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbarScroll\" />\n          <Navbar.Collapse id=\"navbarScroll\">\n            <Nav className=\"m-auto\" style={{ maxHeight: \"100px\" }} navbarScroll>\n              <Form className=\"d-flex\">\n                <FormControl\n                  type=\"search\"\n                  placeholder=\"Search for ideas...\"\n                  className=\"me-2\"\n                  aria-label=\"Search\"\n                />\n                <Button variant=\"primary\" size=\"sm\">\n                  <Search />\n                </Button>\n              </Form>\n              &nbsp;&nbsp;\n              <OverlayTrigger\n                placement=\"right\"\n                overlay={\n                  <Tooltip>\n                    Shuffle all cards to get <strong>ignited</strong>! ðŸ”¥\n                  </Tooltip>\n                }\n              >\n                <MDBBtn\n                  rippleCentered\n                  color=\"primary\"\n                  outline\n                  onClick={this.props.onNewLayout}\n                >\n                  <MDBIcon icon=\"redo\" />\n                </MDBBtn>\n              </OverlayTrigger>\n            </Nav>\n            <Cart\n              items={this.props.items}\n              onTakeItem={this.props.onTakeItem}\n              onClearItems={this.props.onClearItems}\n            />\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n","/Users/grace/Desktop/ecs/spark/blue/fa21-blue-ignite/src/Components/Cart.js",[],{"ruleId":"26","severity":1,"message":"27","line":57,"column":11,"nodeType":"28","endLine":60,"endColumn":12},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":14,"column":27,"nodeType":"35","messageId":"36","endLine":14,"endColumn":36},{"ruleId":"33","severity":1,"message":"37","line":15,"column":10,"nodeType":"35","messageId":"36","endLine":15,"endColumn":21},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'MDBRipple' is defined but never used.","Identifier","unusedVar","'ArrowRepeat' is defined but never used.","no-global-assign","no-unsafe-negation"]